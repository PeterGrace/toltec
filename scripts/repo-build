#!/usr/bin/env python3
# Copyright (c) 2021 The Toltec Contributors
# SPDX-License-Identifier: MIT

from datetime import datetime
from toltec.recipe import Recipe
from toltec.util import file_sha256, http_date_format
import gzip
import os
import requests
import shutil
import subprocess

# Script parameters
remote_repo = 'https://toltec-dev.org/testing'
recipes_dir = 'package'
work_dir = 'build/package'
repo_dir = 'build/repo'

local_only = False
fetch_missing = True

# Create directories if needed
os.makedirs(work_dir, exist_ok=True)
os.makedirs(repo_dir, exist_ok=True)

# Load all recipes
recipes = {}

for name in os.listdir(recipes_dir):
    if name[0] != '.':
        recipes[name] = Recipe.from_file(name,
            os.path.join(recipes_dir, name, 'package'))

# Fetch packages missing from the local repository from the remote repository
# and build a list of packages that are missing from both
missing = {}

for recipe in recipes.values():
    missing[recipe.name] = []

    for package in recipe.packages.values():
        filename = package.filename()
        local_path = os.path.join(repo_dir, filename)

        if os.path.isfile(local_path):
            continue

        if not local_only:
            remote_path = os.path.join(remote_repo, filename)

            if fetch_missing:
                req = requests.get(remote_path)

                if req.status_code == 200:
                    with open(local_path, 'wb') as local:
                        for chunk in req.iter_content(chunk_size=1024):
                            local.write(chunk)

                    last_modified = int(datetime.strptime(
                        req.headers['Last-Modified'],
                        http_date_format).timestamp())

                    os.utime(local_path, (last_modified, last_modified))
                    continue
            else:
                req = requests.head(remote_path)
                if req.status_code == 200: continue

        missing[recipe.name].append(package)

# Build missing packages
for recipe_name, packages in missing.items():
    if packages:
        subprocess.run([
            'scripts/package-build',
            os.path.join(recipes_dir, recipe_name),
            os.path.join(work_dir, recipe_name),
            *[package.name for package in packages]
        ], check=True)

        for package in packages:
            filename = package.filename()
            shutil.copy2(
                os.path.join(work_dir, recipe_name, package.name, filename),
                repo_dir)

# Generate packages index
index_path = os.path.join(repo_dir, 'Packages')
index_gzip_path = os.path.join(repo_dir, 'Packages.gz')

with open(index_path, 'w') as index_file:
    with gzip.open(index_gzip_path, 'wt') as index_gzip_file:
        for recipe in recipes.values():
            for package in recipe.packages.values():
                filename = package.filename()
                local_path = os.path.join(repo_dir, filename)

                # Write index entry
                control = package.control()
                control += recipe.control()
                control += f'''Filename: {filename}
SHA256sum: {file_sha256(local_path)}
Size: {os.path.getsize(local_path)}

'''

                index_file.write(control)
                index_gzip_file.write(control)
